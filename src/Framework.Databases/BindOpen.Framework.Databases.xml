<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BindOpen.Framework.Databases</name>
    </assembly>
    <members>
        <member name="T:BindOpen.Framework.Databases.Data.Business.DbQueryCondition">
            <summary>
            This class represents a condition using a database query condition.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Databases.Data.Business.DbQueryCondition.Query">
            <summary>
            Database data query used in the condition.
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Databases.Data.Business.DbQueryCondition.#ctor">
            <summary>
            Instantiates a new instance of the DbQueryCondition class.
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Databases.Data.Business.DbQueryCondition.#ctor(System.Boolean,BindOpen.Framework.Data.Queries.IDbQuery)">
            <summary>
            Instantiates a new instance of the DbQueryCondition class.
            </summary>
            <param name="trueValue">The true value to consider.</param>
            <param name="query">The data query to consider.</param>
        </member>
        <member name="M:BindOpen.Framework.Databases.Data.Business.DbQueryCondition.Clone">
            <summary>
            Clones this instance.
            </summary>
        </member>
        <member name="T:BindOpen.Framework.Data.Connections.DatabaseConnection">
            <summary>
            This class represents a database connection.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Connections.DatabaseConnection.Connector">
            <summary>
            The connector of this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Data.Connections.DatabaseConnection.#ctor">
            <summary>
            Instantiates a new instance of the DatabaseConnection class.
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Data.Connections.DatabaseConnection.#ctor(BindOpen.Framework.Databases.Extensions.Connectors.DatabaseConnector)">
            <summary>
            Instantiates a new instance of the DatabaseConnection class.
            </summary>
            <param name="connector">The connector to consider.</param>
        </member>
        <member name="M:BindOpen.Framework.Data.Connections.DatabaseConnection.SetConnector(BindOpen.Framework.Core.Extensions.Runtime.IBdoConnector)">
            <summary>
            Sets the connector of this instance.
            </summary>
            <param name="connector">The database connector to consider.</param>
        </member>
        <member name="M:BindOpen.Framework.Data.Connections.DatabaseConnection.GetIDbConnection">
            <summary>
            Gets the database connection of this instance.
            </summary>
            <returns>Returns the connection of this instance.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Connections.DatabaseConnection.ExecuteNonQuery(System.String,BindOpen.Framework.Core.System.Scripting.IBdoScriptVariableSet,BindOpen.Framework.Core.System.Diagnostics.IBdoLog)">
            <summary>
            Executes a database data query that returns nothing.
            </summary>
            <param name="queryText">The text to execute.</param>
            <param name="scriptVariableSet">The interpretation variables to consider.</param>
            <param name="log">The log to consider.</param>
            <returns>The log of the data query execution task.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Connections.DatabaseConnection.ExecuteQuery(BindOpen.Framework.Data.Queries.IDbQuery,BindOpen.Framework.Core.System.Scripting.IBdoScriptVariableSet,BindOpen.Framework.Core.System.Diagnostics.IBdoLog)">
            <summary>
            Executes a database data query putting the result into a data reader.
            </summary>
            <param name="query">The data query to execute.</param>
            <param name="scriptVariableSet">The interpretation variables to consider.</param>
            <param name="log">The log to consider.</param>
            <returns>The log of the data query execution task.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Connections.DatabaseConnection.ExecuteQuery(System.String,System.Data.IDataReader@,BindOpen.Framework.Core.System.Scripting.IBdoScriptVariableSet,BindOpen.Framework.Core.System.Diagnostics.IBdoLog)">
            <summary>
            Executes a database data query putting the result into a data reader.
            </summary>
            <param name="queryText">The text to execute.</param>
            <param name="dataReader">The output data reader.</param>
            <param name="scriptVariableSet">The interpretation variables to consider.</param>
            <param name="log">The log to consider.</param>
            <returns>The log of the data query execution task.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Connections.DatabaseConnection.ExecuteQuery(BindOpen.Framework.Data.Queries.IDbQuery,System.Data.IDataReader@,BindOpen.Framework.Core.System.Scripting.IBdoScriptVariableSet,BindOpen.Framework.Core.System.Diagnostics.IBdoLog)">
            <summary>
            Executes a database data query putting the result into a dataset.
            </summary>
            <param name="query">The database data query to execute.</param>
            <param name="dataReader">The output data reader.</param>
            <param name="scriptVariableSet">The interpretation variables to consider.</param>
            <param name="log">The log to consider.</param>
            <returns>The log of the data query execution task.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Connections.DatabaseConnection.ExecuteQuery(System.String,System.Data.DataSet@,BindOpen.Framework.Core.System.Scripting.IBdoScriptVariableSet,BindOpen.Framework.Core.System.Diagnostics.IBdoLog)">
            <summary>
            Executes a database data query putting the result into a dataset.
            </summary>
            <param name="queryText">The text to execute.</param>
            <param name="dataSet">The output dataset.</param>
            <param name="scriptVariableSet">The interpretation variables to consider.</param>
            <param name="log">The log to consider.</param>
            <returns>The log of the data query execution task.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Connections.DatabaseConnection.ExecuteQuery(BindOpen.Framework.Data.Queries.IDbQuery,System.Data.DataSet@,BindOpen.Framework.Core.System.Scripting.IBdoScriptVariableSet,BindOpen.Framework.Core.System.Diagnostics.IBdoLog)">
            <summary>
            Executes a database data query putting the result into a dataset.
            </summary>
            <param name="query">The database data query to execute.</param>
            <param name="dataSet">The output dataset.</param>
            <param name="scriptVariableSet">The interpretation variables to consider.</param>
            <param name="log">The log to consider.</param>
            <returns>The log of the data query execution task.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Connections.DatabaseConnection.GetIdentity(System.Int64@,BindOpen.Framework.Core.System.Diagnostics.IBdoLog)">
            <summary>
            Gets the identity of the last inserted item
            </summary>
            <param name="id">The long identifier to populate.</param>
            <param name="log">The log to consider.</param>
        </member>
        <member name="M:BindOpen.Framework.Data.Connections.DatabaseConnection.UpdateDataTable(System.String,System.Data.DataTable,BindOpen.Framework.Core.System.Diagnostics.IBdoLog)">
            <summary>
            Executes the specified data query and updates the specified data table.
            </summary>
            <param name="queryText">The text to execute.</param>
            <param name="dataTable">The data table to update.</param>
            <param name="log">The log to consider.</param>
            <returns>The log of the task.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Connections.DatabaseConnection.UpdateDataTable(BindOpen.Framework.Data.Queries.IDbQuery,System.Data.DataTable,BindOpen.Framework.Core.System.Diagnostics.IBdoLog)">
            <summary>
            Executes the specified data query and updates the specified data table.
            </summary>
            <param name="query">The data query to execute.</param>
            <param name="dataTable">The data table to update.</param>
            <param name="log">The log to consider.</param>
            <returns>The log of the task.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Connections.DatabaseConnection.UpdateDataSet(System.String,System.Data.DataSet,System.Collections.Generic.List{System.String},BindOpen.Framework.Core.System.Diagnostics.IBdoLog)">
            <summary>
            Executes the specified data query and updates the specified data table.
            </summary>
            <param name="queryText">The text to execute.</param>
            <param name="dataSet">The data set to update.</param>
            <param name="tableNames">The table names to consider.</param>
            <param name="log">The log to consider.</param>
            <returns>The log of the task.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Connections.DatabaseConnection.UpdateDataSet(BindOpen.Framework.Data.Queries.IDbQuery,System.Data.DataSet,System.Collections.Generic.List{System.String},BindOpen.Framework.Core.System.Diagnostics.IBdoLog)">
            <summary>
            Executes the specified data query and updates the specified data table.
            </summary>
            <param name="query">The data query to execute.</param>
            <param name="dataSet">The data set to update.</param>
            <param name="tableNames">The table names to consider.</param>
            <param name="log">The log to consider.</param>
            <returns>The log of the task.</returns>
        </member>
        <member name="T:BindOpen.Framework.Data.Connections.IDatabaseConnection">
            <summary>
            This interfaces represents a connection.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Connections.IDatabaseConnection.Connector">
            <summary>
            Connector of the connection.
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Data.Connections.IDatabaseConnection.ExecuteNonQuery(System.String,BindOpen.Framework.Core.System.Scripting.IBdoScriptVariableSet,BindOpen.Framework.Core.System.Diagnostics.IBdoLog)">
            <summary>
            Executes the specified non query text.
            </summary>
            <param name="queryText">The query text to execute.</param>
            <param name="scriptVariableSet">The script variable set to consider.</param>
            <param name="log">The log to append.</param>
        </member>
        <member name="M:BindOpen.Framework.Data.Connections.IDatabaseConnection.ExecuteQuery(BindOpen.Framework.Data.Queries.IDbQuery,BindOpen.Framework.Core.System.Scripting.IBdoScriptVariableSet,BindOpen.Framework.Core.System.Diagnostics.IBdoLog)">
            <summary>
            Executes the specified query text.
            </summary>
            <param name="query">The query to execute.</param>
            <param name="scriptVariableSet">The script variable set to consider.</param>
            <param name="log">The log to append.</param>
        </member>
        <member name="M:BindOpen.Framework.Data.Connections.IDatabaseConnection.ExecuteQuery(BindOpen.Framework.Data.Queries.IDbQuery,System.Data.DataSet@,BindOpen.Framework.Core.System.Scripting.IBdoScriptVariableSet,BindOpen.Framework.Core.System.Diagnostics.IBdoLog)">
            <summary>
            Executes the specified query text and populate the specified data set.
            </summary>
            <param name="query">The query to execute.</param>
            <param name="dataSet">The data set to populate.</param>
            <param name="scriptVariableSet">The script variable set to consider.</param>
            <param name="log">The log to append.</param>
        </member>
        <member name="M:BindOpen.Framework.Data.Connections.IDatabaseConnection.ExecuteQuery(BindOpen.Framework.Data.Queries.IDbQuery,System.Data.IDataReader@,BindOpen.Framework.Core.System.Scripting.IBdoScriptVariableSet,BindOpen.Framework.Core.System.Diagnostics.IBdoLog)">
            <summary>
            
            </summary>
            <param name="query"></param>
            <param name="dataReader"></param>
            <param name="scriptVariableSet"></param>
            <param name="log"></param>
        </member>
        <member name="M:BindOpen.Framework.Data.Connections.IDatabaseConnection.ExecuteQuery(System.String,System.Data.DataSet@,BindOpen.Framework.Core.System.Scripting.IBdoScriptVariableSet,BindOpen.Framework.Core.System.Diagnostics.IBdoLog)">
            <summary>
            
            </summary>
            <param name="queryText"></param>
            <param name="dataSet"></param>
            <param name="scriptVariableSet"></param>
            <param name="log"></param>
        </member>
        <member name="M:BindOpen.Framework.Data.Connections.IDatabaseConnection.ExecuteQuery(System.String,System.Data.IDataReader@,BindOpen.Framework.Core.System.Scripting.IBdoScriptVariableSet,BindOpen.Framework.Core.System.Diagnostics.IBdoLog)">
            <summary>
            
            </summary>
            <param name="queryText"></param>
            <param name="dataReader"></param>
            <param name="scriptVariableSet"></param>
            <param name="log"></param>
        </member>
        <member name="M:BindOpen.Framework.Data.Connections.IDatabaseConnection.GetIDbConnection">
            <summary>
            Get the database connection.
            </summary>
            <returns>Returns the database connection.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Connections.IDatabaseConnection.GetIdentity(System.Int64@,BindOpen.Framework.Core.System.Diagnostics.IBdoLog)">
            <summary>
            Get the identity of the last tuple processed.
            </summary>
            <returns>Returns the identity of the last tuple processed.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Connections.IDatabaseConnection.UpdateDataSet(BindOpen.Framework.Data.Queries.IDbQuery,System.Data.DataSet,System.Collections.Generic.List{System.String},BindOpen.Framework.Core.System.Diagnostics.IBdoLog)">
            <summary>
            
            </summary>
            <param name="query"></param>
            <param name="dataSet"></param>
            <param name="tableNames"></param>
            <param name="log"></param>
        </member>
        <member name="M:BindOpen.Framework.Data.Connections.IDatabaseConnection.UpdateDataSet(System.String,System.Data.DataSet,System.Collections.Generic.List{System.String},BindOpen.Framework.Core.System.Diagnostics.IBdoLog)">
            <summary>
            
            </summary>
            <param name="queryText"></param>
            <param name="dataSet"></param>
            <param name="tableNames"></param>
            <param name="log"></param>
        </member>
        <member name="M:BindOpen.Framework.Data.Connections.IDatabaseConnection.UpdateDataTable(BindOpen.Framework.Data.Queries.IDbQuery,System.Data.DataTable,BindOpen.Framework.Core.System.Diagnostics.IBdoLog)">
            <summary>
            
            </summary>
            <param name="query"></param>
            <param name="dataTable"></param>
            <param name="log"></param>
        </member>
        <member name="M:BindOpen.Framework.Data.Connections.IDatabaseConnection.UpdateDataTable(System.String,System.Data.DataTable,BindOpen.Framework.Core.System.Diagnostics.IBdoLog)">
            <summary>
            
            </summary>
            <param name="queryText"></param>
            <param name="dataTable"></param>
            <param name="log"></param>
        </member>
        <member name="T:BindOpen.Framework.Data.Depots.BdoDbModel">
            <summary>
            This class represents a data queries depot.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Depots.BdoDbModel.Queries">
            <summary>
            Queries of this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Data.Depots.BdoDbModel.#ctor">
            <summary>
            Instantiates a new instance of the BdoDbModel class.
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Data.Depots.BdoDbModel.#ctor(BindOpen.Framework.Data.Queries.DbQuery[])">
            <summary>
            Instantiates a new instance of the BdoDbModel class.
            </summary>
            <param name="queries">The queries to consider.</param>
        </member>
        <member name="M:BindOpen.Framework.Data.Depots.BdoDbModel.GetQuery(System.String)">
            <summary>
            Gets the database query with the specified name.
            </summary>
            <param name="name">The name to consider.</param>
            <returns>Returns the database query with the specified name.</returns>
        </member>
        <member name="T:BindOpen.Framework.Data.Depots.BdoDbQueryExtensions">
            <summary>
            This class represents an data queries factory.
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Data.Depots.BdoDbQueryExtensions.RegisterDbModel(BindOpen.Framework.Core.Data.Stores.IBdoDataStore,System.Action{BindOpen.Framework.Data.Depots.IBdoDbModel})">
            <summary>
            Add a database queries depot into the specified data store executing the specified action.
            </summary>
            <param name="dataStore">The data store to consider.</param>
            <param name="action">The action to execute on the created depot.</param>
            <returns>Returns the data store to update.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Depots.BdoDbQueryExtensions.GetDbModel(BindOpen.Framework.Core.Data.Stores.IBdoDataStore)">
            <summary>
            Gets the database queries depot of the specified data store.
            </summary>
            <param name="dataStore">The data store to consider.</param>
            <returns>Returns the datasource depot of the specified data store.</returns>
        </member>
        <member name="T:BindOpen.Framework.Data.Depots.IBdoDbModel">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Depots.IBdoDbModel.Queries">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Data.Depots.IBdoDbModel.GetQuery(System.String)">
            <summary>
            Gets the database query with the specified name.
            </summary>
            <param name="name">The name to consider.</param>
            <returns>Returns the database query with the specified name.</returns>
        </member>
        <member name="T:BindOpen.Framework.Data.Queries.AdvancedDbQuery">
            <summary>
            This class represents an advanced database data query.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.AdvancedDbQuery.IsDistinct">
            <summary>
            Indicates whether this instance is distinct. When distinct an advanced Select 
            database data query only returns distinct records.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.AdvancedDbQuery.Top">
            <summary>
            Number of top items of this instance. Top items are the items a advanced Select 
            database data query will return.
            </summary>
            <remarks>By default it is -1 meaning no limit.</remarks>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.AdvancedDbQuery.FromStatements">
            <summary>
            From clause of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.AdvancedDbQuery.WhereClause">
            <summary>
            Where clause of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.AdvancedDbQuery.GroupByClause">
            <summary>
            Group by statement of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.AdvancedDbQuery.HavingClause">
            <summary>
            Having statement of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.AdvancedDbQuery.OrderByStatements">
            <summary>
            Order statements of this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.AdvancedDbQuery.#ctor">
            <summary>
            Instantiates a new instance of the AdvancedDbQuery class.
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.AdvancedDbQuery.#ctor(BindOpen.Framework.Data.Queries.DbQueryKind,System.String,System.String,System.String)">
            <summary>
            Instantiates a new instance of the AdvancedDbQuery class.
            </summary>
            <param name="kind">Type of database data query.</param>
            <param name="dataModule">Name of the data module.</param>
            <param name="schema">Schema of the data module.</param>
            <param name="dataTable">Name of data table.</param>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.AdvancedDbQuery.#ctor(System.String,BindOpen.Framework.Data.Queries.DbQueryKind,System.String,System.String,System.String)">
            <summary>
            Instantiates a new instance of the AdvancedDbQuery class.
            </summary>
            <param name="name">Name of the query.</param>
            <param name="kind">Type of database data query.</param>
            <param name="dataModule">Name of the data module.</param>
            <param name="schema">Schema of the data module.</param>
            <param name="dataTable">Name of data table.</param>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.AdvancedDbQuery.WithFields(BindOpen.Framework.Extensions.Carriers.DbField[])">
            <summary>
            Sets the specified fields.
            </summary>
            <param name="fields">The fields to consider.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.AdvancedDbQuery.From(BindOpen.Framework.Data.Queries.IDbQueryFromStatement[])">
            <summary>
            
            </summary>
            <param name="statements"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.AdvancedDbQuery.GroupBy(BindOpen.Framework.Data.Queries.IDbQueryGroupByStatement)">
            <summary>
            
            </summary>
            <param name="clause"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.AdvancedDbQuery.Having(BindOpen.Framework.Data.Queries.IDbQueryHavingStatement)">
            <summary>
            
            </summary>
            <param name="clause"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.AdvancedDbQuery.AsDistinct">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.AdvancedDbQuery.OrderBy(BindOpen.Framework.Data.Queries.IDbQueryOrderByStatement[])">
            <summary>
            
            </summary>
            <param name="statements"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.AdvancedDbQuery.WithTop(System.Int32)">
            <summary>
            
            </summary>
            <param name="top"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.AdvancedDbQuery.Where(BindOpen.Framework.Core.Data.Expression.IDataExpression)">
            <summary>
            
            </summary>
            <param name="clause"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.AdvancedDbQuery.WithTableAlias(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="T:BindOpen.Framework.Data.Queries.ApiScriptClause">
            <summary>
            This class represents a Api script clause.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.ApiScriptClause.Operators">
            <summary>
            The operators of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.ApiScriptClause.ValueDefinition">
            <summary>
            The value definition of this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.ApiScriptClause.#ctor">
            <summary>
            Creates a new instance of the ApiScriptClause class.
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.ApiScriptClause.#ctor(System.String,BindOpen.Framework.Extensions.Carriers.DbField,BindOpen.Framework.Core.Data.Common.DataOperator[])">
            <summary>
            Creates a new instance of the ApiScriptClause class.
            </summary>
            <param name="fieldAlias">The field alias to consider.</param>
            <param name="field">The field to consider.</param>
            <param name="operators">The operators to consider.</param>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.ApiScriptClause.#ctor(System.String,BindOpen.Framework.Extensions.Carriers.DbField,BindOpen.Framework.Core.Data.Common.DataOperator,BindOpen.Framework.Data.Queries.ApiScriptFilteringDefinition)">
            <summary>
            Creates a new instance of the DbQueryScriptItem class.
            </summary>
            <param name="fieldAlias">The field alias to consider.</param>
            <param name="field">The field to consider.</param>
            <param name="aOperator">The operator to consider.</param>
            <param name="valueFilteringDefinition">The value filter definition to consider.</param>
        </member>
        <member name="T:BindOpen.Framework.Data.Queries.ApiScriptField">
            <summary>
            This class represents a Api script expression.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.ApiScriptField.FieldAlias">
            <summary>
            The field alias of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.ApiScriptField.Field">
            <summary>
            The field of this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.ApiScriptField.#ctor">
            <summary>
            Creates a new instance of the ApiScriptExpression class.
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.ApiScriptField.#ctor(System.String,BindOpen.Framework.Extensions.Carriers.DbField)">
            <summary>
            Creates a new instance of the ApiScriptExpression class.
            </summary>
            <param name="fieldAlias">The field alias to consider.</param>
            <param name="field">The field to consider.</param>
        </member>
        <member name="T:BindOpen.Framework.Data.Queries.ApiScriptFilteringDefinition">
            <summary>
            This class represents a Api script filtering definition.
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.ApiScriptFilteringDefinition.#ctor">
            <summary>
            Creates a new instance of the ApiScriptFilteringDefinition class.
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.ApiScriptFilteringDefinition.#ctor(BindOpen.Framework.Data.Queries.ApiScriptClause[])">
            <summary>
            Creates a new instance of the ApiScriptFilteringDefinition class.
            </summary>
            <param name="clauses">The clauses to consider.</param>
        </member>
        <member name="T:BindOpen.Framework.Data.Queries.ApiScriptSortingDefinition">
            <summary>
            This class represents a Api script sorting definition.
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.ApiScriptSortingDefinition.#ctor">
            <summary>
            Creates a new instance of the ApiScriptSortingDefinition class.
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.ApiScriptSortingDefinition.#ctor(BindOpen.Framework.Data.Queries.ApiScriptField[])">
            <summary>
            Creates a new instance of the ApiScriptSortingDefinition class.
            </summary>
            <param name="clauses">The clauses to consider.</param>
        </member>
        <member name="T:BindOpen.Framework.Data.Queries.DataServiceExtension">
            <summary>
            This class represents a repository extension.
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DataServiceExtension.GetData``1(BindOpen.Framework.Core.Application.Services.Data.IBdoConnection,BindOpen.Framework.Core.System.Diagnostics.IBdoLog,BindOpen.Framework.Data.Queries.IDbQuery,System.Func{System.Data.IDbConnection,System.String,``0},BindOpen.Framework.Core.System.Scripting.IBdoScriptVariableSet)">
            <summary>
            Retrieves the specified data.
            </summary>
            <param name="repository">The repository to consider.</param>
            <typeparam name="T">The class of the data to consider.</typeparam>
            <param name="log">The log to consider.</param>
            <param name="query">The query to consider.</param>
            <param name="function">The function to get data.</param>
            <param name="scriptVariableSet">The script variable set to consider.</param>
            <returns>Returns the specified data.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DataServiceExtension.GetId``2(BindOpen.Framework.Data.Connections.IDatabaseConnection,BindOpen.Framework.Core.System.Diagnostics.IBdoLog)">
            <summary>
            Executes the specified function.
            </summary>
            <typeparam name="Q"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="connection">The database connection to use.</param>
            <param name="log">The log to consider.</param>
            <returns></returns>
        </member>
        <member name="T:BindOpen.Framework.Data.Queries.DbQueryExtension">
            <summary>
            This class represents the database data query extension.
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQueryExtension.ConvertToExtensionScript(System.String,BindOpen.Framework.Core.System.Diagnostics.IBdoLog,BindOpen.Framework.Data.Queries.ApiScriptFilteringDefinition,System.Int32)">
            <summary>
            Converts the specifed search query into an extension script.
            </summary>
            <param name="searchQuery">The search query to consider.</param>
            <param name="log">The </param>
            <param name="definition">The clause statement to consider.</param>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQueryExtension.Filter(BindOpen.Framework.Data.Queries.IAdvancedDbQuery,System.String,BindOpen.Framework.Core.System.Diagnostics.IBdoLog,BindOpen.Framework.Data.Queries.ApiScriptFilteringDefinition)">
            <summary>
            Adds filters to the specified database query considering the specified filter query string.
            </summary>
            <param name="dbQuery">The database query to consider.</param>
            <param name="filterQuery">The filter query string to consider.</param>
            <param name="log">The log to consider.</param>
            <param name="definition">The clause statement to consider.</param>
            <returns>The built query.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQueryExtension.Sort(BindOpen.Framework.Data.Queries.IAdvancedDbQuery,System.String,BindOpen.Framework.Core.System.Diagnostics.IBdoLog,BindOpen.Framework.Data.Queries.ApiScriptSortingDefinition)">
            <summary>
            Sorts the specified query considering the specified query script.
            </summary>
            <param name="query">The database query to consider.</param>
            <param name="sortQuery">The sort query text to consider.</param>
            <param name="log">The log to consider.</param>
            <param name="definition">The definition to consider.</param>
            <returns>The built query.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQueryExtension.Paginate(BindOpen.Framework.Data.Queries.IAdvancedDbQuery,System.Nullable{System.Int32},System.String,BindOpen.Framework.Core.System.Diagnostics.IBdoLog,BindOpen.Framework.Data.Queries.ApiScriptSortingDefinition)">
            <summary>
            Builds the following query: Get the server instances.
            </summary>
            <param name="query">The database query to consider.</param>
            <param name="pageSize">The page size to consider.</param>
            <param name="pageToken">The page token text to consider.</param>
            <param name="log">The log to consider.</param>
            <param name="clauseStatement">The clause statement to consider.</param>
            <returns>The built query.</returns>
        </member>
        <member name="T:BindOpen.Framework.Data.Queries.BasicDbQuery">
            <summary>
            This class represents an simple database data query.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.BasicDbQuery.IsDistinct">
            <summary>
            Indicates whether this instance is distinct. When distinct an advanced Select 
            database data query only returns distinct records.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.BasicDbQuery.Top">
            <summary>
            Number of top items of this instance. Top items are the items a advanced Select 
            database data query will return.
            </summary>
            <remarks>By default it is -1 meaning no limit.</remarks>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.BasicDbQuery.IdFields">
            <summary>
            ID fields of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.BasicDbQuery.FromStatements">
            <summary>
            From clause of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.BasicDbQuery.OrderByStatements">
            <summary>
            Order by statements of this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.BasicDbQuery.#ctor">
            <summary>
            Instantiates a new instance of the BasicDbQuery class.
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.BasicDbQuery.#ctor(BindOpen.Framework.Data.Queries.DbQueryKind,System.String,System.String,System.String)">
            <summary>
            Instantiates a new instance of the BasicDbQuery class.
            </summary>
            <param name="kind">Kind of database data query.</param>
            <param name="dataModule">Name of the data module.</param>
            <param name="schema">Schema of the data module.</param>
            <param name="dataTable">Name of data table.</param>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.BasicDbQuery.#ctor(System.String,BindOpen.Framework.Data.Queries.DbQueryKind,System.String,System.String,System.String)">
            <summary>
            Instantiates a new instance of the BasicDbQuery class.
            </summary>
            <param name="name">Name of the query.</param>
            <param name="kind">Kind of database data query.</param>
            <param name="dataModule">Name of the data module.</param>
            <param name="schema">Schema of the data module.</param>
            <param name="dataTable">Name of data table.</param>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.BasicDbQuery.GetIdFieldWithBoundFieldName(System.String)">
            <summary>
            Gets the data field with the specified bound data field name.
            </summary>
            <param name="boundFieldName">Name of the bound data field.</param>
            <returns>The data field with the specified bound data field name.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.BasicDbQuery.WithFields(BindOpen.Framework.Extensions.Carriers.DbField[])">
            <summary>
            Sets the specified fields.
            </summary>
            <param name="fields">The fields to consider.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.BasicDbQuery.From(BindOpen.Framework.Data.Queries.IDbQueryFromStatement[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.BasicDbQuery.WithIdFields(BindOpen.Framework.Extensions.Carriers.DbField[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.BasicDbQuery.AsDistinct">
            <summary>
            Indicates that this instance is distinct.
            </summary>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.BasicDbQuery.OrderBy(BindOpen.Framework.Data.Queries.IDbQueryOrderByStatement[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.BasicDbQuery.WithTop(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.BasicDbQuery.WithTableAlias(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="T:BindOpen.Framework.Data.Queries.DbDataFieldViewMode">
            <summary>
            This enumerates the possible modes of data field.
            </summary>
        </member>
        <member name="F:BindOpen.Framework.Data.Queries.DbDataFieldViewMode.OnlyName">
            <summary>
            Only name.
            </summary>
        </member>
        <member name="F:BindOpen.Framework.Data.Queries.DbDataFieldViewMode.CompleteName">
            <summary>
            Complete name.
            </summary>
        </member>
        <member name="F:BindOpen.Framework.Data.Queries.DbDataFieldViewMode.CompleteNameOrValue">
            <summary>
            Complete name or value.
            </summary>
        </member>
        <member name="F:BindOpen.Framework.Data.Queries.DbDataFieldViewMode.NameEqualsValue">
            <summary>
            Name equals value.
            </summary>
        </member>
        <member name="F:BindOpen.Framework.Data.Queries.DbDataFieldViewMode.OnlyValue">
            <summary>
            Only value.
            </summary>
        </member>
        <member name="F:BindOpen.Framework.Data.Queries.DbDataFieldViewMode.CompleteNameAsAlias">
            <summary>
            Complete name as alias.
            </summary>
        </member>
        <member name="F:BindOpen.Framework.Data.Queries.DbDataFieldViewMode.OnlyNameAsAlias">
            <summary>
            Only name as alias.
            </summary>
        </member>
        <member name="T:BindOpen.Framework.Data.Queries.DbQueryBuilder">
            <summary>
            This class represents a builder of database query.
            </summary>
            <summary>
            This class represents a builder of database query.
            </summary>
            <summary>
            This class represents a builder of database query.
            </summary>
            <summary>
            This class represents a builder of database query.
            </summary>
            <summary>
            This class represents a builder of database query.
            </summary>
            <summary>
            This class represents a builder of database query.
            </summary>
            <summary>
            This class represents a builder of database query.
            </summary>
            <summary>
            This class represents a builder of database query.
            </summary>
            <summary>
            This class represents a builder of database query.
            </summary>
        </member>
        <member name="F:BindOpen.Framework.Data.Queries.DbQueryBuilder._scope">
            <summary>
            The application scope of this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQueryBuilder.#ctor(BindOpen.Framework.Databases.Extensions.Connectors.DatabaseConnectorKind,BindOpen.Framework.Core.Application.Scopes.IBdoScope)">
            <summary>
            Instantiates a new instance of the DbQueryBuilder class.
            </summary>
            <param name="databaseKind">The kind of database to consider.</param>
            <param name="scope">The scope to consider.</param>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQueryBuilder.GetDatabaseName(System.String)">
            <summary>
            Gets the database name corresponding to the specified data module name.
            </summary>
            <param name="dataModuleName">The data module name to consider.</param>
            <remarks>If not found, it returns the specified data module name.</remarks>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQueryBuilder.BuildQuery(BindOpen.Framework.Data.Queries.IDbQuery,BindOpen.Framework.Core.System.Scripting.IBdoScriptVariableSet,System.String@)">
            <summary>
            Builds the specified simple database data query and put the result into the specified string query.
            </summary>
            <param name="query">The database data query to build.</param>
            <param name="scriptVariableSet">The interpretation variables to consider.</param>
            <param name="queryString">The output string query.</param>
            <returns>The log of the build task.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQueryBuilder.Build(BindOpen.Framework.Data.Queries.IBasicDbQuery,BindOpen.Framework.Core.System.Scripting.IBdoScriptVariableSet,System.String@)">
            <summary>
            Builds the specified simple database data query and put the result
            into the specified string MS Sql Server query.
            <remarks>We assume the query already exits.</remarks>
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQueryBuilder.BuildQuery(BindOpen.Framework.Data.Queries.IBasicDbQuery,BindOpen.Framework.Core.System.Scripting.IBdoScriptVariableSet,System.String@)">
            <summary>
            Builds the specified simple database data query and put the result into the specified string query.
            </summary>
            <param name="query">The database data query to build.</param>
            <param name="scriptVariableSet">The interpretation variables to consider.</param>
            <param name="queryString">The output string query.</param>
            <returns>The log of the build task.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQueryBuilder.Build(BindOpen.Framework.Data.Queries.IAdvancedDbQuery,BindOpen.Framework.Core.System.Scripting.IBdoScriptVariableSet,System.String@)">
            <summary>
            Builds the specified simple database data query and put the result
            into the specified string MS Sql Server query.
            <remarks>We assume the query already exits.</remarks>
            </summary>
            <param name="query"></param>
            <param name="scriptVariableSet"></param>
            <param name="queryString"></param>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQueryBuilder.BuildQuery(BindOpen.Framework.Data.Queries.IAdvancedDbQuery,BindOpen.Framework.Core.System.Scripting.IBdoScriptVariableSet,System.String@)">
            <summary>
            Builds the specified advanced database data query and put the result
            into the specified string query.
            </summary>
            <param name="query">The database data query to build.</param>
            <param name="scriptVariableSet">The interpretation variables to consider.</param>
            <param name="queryString">The output string query.</param>
            <returns>The log of the build task.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQueryBuilder.GetSqlText_Count(System.Object[])">
            <summary>
            Evaluates the script word $SQLCOUNT.
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQueryBuilder.GetSqlText_TextCount(System.Object[])">
            <summary>
            Evaluates the script word $SQLCOUNT.
            </summary>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQueryBuilder.GetSqlText_Sum(System.Object[])">
            <summary>
            Evaluates the script word $SQLSUM.
            </summary>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQueryBuilder.GetSqlText_Average(System.Object[])">
            <summary>
            Evaluates the script word $SQLAVG.
            </summary>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQueryBuilder.GetSqlText_In(System.Object[])">
            <summary>
            Evaluates the script word $SQLIN.
            </summary>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQueryBuilder.GetSqlText_Equal(System.String,System.String)">
            <summary>
            Evaluates the script word $SQLEQ.
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQueryBuilder.GetSqlText_NotEqual(System.String,System.String)">
            <summary>
            Evaluates the script word $SQLDIFF.
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQueryBuilder.GetSqlText_Greater(System.String,System.String)">
            <summary>
            Evaluates the script word $SQLGT.
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQueryBuilder.GetSqlText_GreaterOrEqual(System.String,System.String)">
            <summary>
            Evaluates the script word $SQLGTE.
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQueryBuilder.GetSqlText_Less(System.String,System.String)">
            <summary>
            Evaluates the script word $SQLLT.
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQueryBuilder.GetSqlText_LessOrEqual(System.String,System.String)">
            <summary>
            Evaluates the script word $SQLLTE.
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQueryBuilder.GetSqlText_IsNull(System.String)">
            <summary>
            Evaluates the script word $SQLISNULL.
            </summary>
            <param name="value1"></param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQueryBuilder.GetSqlText_ConvertToText(System.String)">
            <summary>
            Evaluates the script word $SQLCONVERTTOTEXT.
            </summary>
            <param name="value1"></param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQueryBuilder.GetSqlText_CurrentDate(System.Object[])">
            <summary>
            Evaluates the script word $SQLGETCURRENTDATE.
            </summary>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQueryBuilder.GetSqlText_If(System.String,System.String,System.String)">
            <summary>
            Evaluates the script word $SQLIF.
            </summary>
            <param name="condition"></param>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQueryBuilder.GetSqlText_Not(System.String)">
            <summary>
            Evaluates the script word $SQLNOT.
            </summary>
            <param name="value1">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQueryBuilder.GetSqlText_Or(System.Object[])">
            <summary>
            Evaluates the script word $SQLOR.
            </summary>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQueryBuilder.GetSqlText_And(System.Object[])">
            <summary>
            Evaluates the script word $SQLAND.
            </summary>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQueryBuilder.GetSqlText_Xor(System.Object[])">
            <summary>
            Evaluates the script word $SQLXOR.
            </summary>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQueryBuilder.GetSqlText_Text(System.String)">
            <summary>
            Evaluates the script word $SQLTEXT.
            </summary>
            <param name="value1"></param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQueryBuilder.GetSqlText_Like(System.String,System.String)">
            <summary>
            Evaluates the script word $SQLLIKE.
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQueryBuilder.GetSqlText_Replace(System.String,System.String,System.String)">
            <summary>
            Evaluates the script word $SQLREPLACE.
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="value3"></param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQueryBuilder.GetSqlText_Concatenate(System.Object[])">
            <summary>
            Evaluates the script word $SQLCONCATENATE.
            </summary>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQueryBuilder.GetSqlText_Null">
            <summary>
            Evaluates the script word $SQLNULL.
            </summary>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQueryBuilder.GetSqlText_True">
            <summary>
            Evaluates the script word $SQLTRUE.
            </summary>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQueryBuilder.GetSqlText_Database(System.String)">
            <summary>
            Evaluates the script word %SQLDATABASE.
            </summary>
            <param name="name"></param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQueryBuilder.GetSqlText_Schema(System.String,System.String)">
            <summary>
            Evaluates the script word %SQLSCHEMA.
            </summary>
            <param name="name"></param>
            <param name="location"></param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQueryBuilder.GetSqlText_Table(System.String,System.String)">
            <summary>
            Evaluates the script word [%DATABASE->]%TABLE.
            </summary>
            <param name="name"></param>
            <param name="location"></param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQueryBuilder.GetSqlText_Field(System.String,System.String)">
            <summary>
            Evaluates the script word [[%DATABASE->]%TABLE->]%FIELD.
            </summary>
            <param name="name"></param>
            <param name="location"></param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQueryBuilder.GetSqlText_List(System.Object[])">
            <summary>
            Evaluates the script word $SQLLIST.
            </summary>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQueryBuilder.GetSqlText_NewGuid">
            <summary>
            Evaluates the script word $SQLNEWGUID.
            </summary>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQueryBuilder.GetSqlText_Random">
            <summary>
            Evaluates the script word $SQLRANDOM.
            </summary>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="T:BindOpen.Framework.Data.Queries.DbQuery">
            <summary>
            This class represents a database data query.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.DbQuery.IsTrackingEnabled">
            <summary>
            Indicates whether the tracking is enabled for this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.DbQuery.Name">
            <summary>
            Name of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.DbQuery.DataModule">
            <summary>
            Name of the data module of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.DbQuery.DataTable">
            <summary>
            Name of the data table of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.DbQuery.DataTableAlias">
            <summary>
            Name of the data table alias of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.DbQuery.Schema">
            <summary>
            Schema of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.DbQuery.Kind">
            <summary>
            The kind of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.DbQuery.Fields">
            <summary>
            Fields of this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQuery.#ctor">
            <summary>
            Instantiates a new instance of the DbQuery class.
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQuery.#ctor(System.String)">
            <summary>
            Instantiates a new instance of the DbQuery class.
            </summary>
            <param name="name">Name of the query.</param>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQuery.Key">
            <summary>
            Gets the key of the item.
            </summary>
            <returns>Returns the key of the item.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQuery.GetFieldWithBoundFieldName(System.String)">
            <summary>
            Gets the data field with the specified bound data field name.
            </summary>
            <param name="boundFieldName">Name of the bound data field.</param>
            <returns>The data field with the specified bound data field name.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQuery.GetDataFieldWithName(System.String)">
            <summary>
            Gets the data field with the specified data field name.
            </summary>
            <param name="name">Name of the field.</param>
            <returns>The data field with the specified data field name.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQuery.GetKeyDataFields">
            <summary>
            Gets the key data fields of this instance.
            </summary>
            <returns>The key data fields of this instance.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQuery.GetPrimaryKeyDataFields">
            <summary>
            Gets the primary data fields of this instance.
            </summary>
            <returns>The primary data fields of this instance.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQuery.GetForeignKeyDataFields">
            <summary>
            Gets the foreign data fields of this instance.
            </summary>
            <returns>The foreign data fields of this instance.</returns>
        </member>
        <member name="T:BindOpen.Framework.Data.Queries.DbQueryFromStatement">
            <summary>
            This class represents the From statement of a database data query.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.DbQueryFromStatement.UnionStatement">
            <summary>
            Union statement.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.DbQueryFromStatement.JoinStatements">
            <summary>
            List of join statements.
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQueryFromStatement.#ctor">
            <summary>
            Instantiates a new instance of the DbQueryFromStatement class.
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQueryFromStatement.WithUnion(BindOpen.Framework.Data.Queries.IDbQueryUnionStatement)">
            <summary>
            Sets the specified union statement.
            </summary>
            <param name="statement">The union statement to consider.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQueryFromStatement.WithJoin(BindOpen.Framework.Data.Queries.IDbQueryJoinStatement)">
            <summary>
            Sets the specified join statement.
            </summary>
            <param name="statement">The join statement to consider.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQueryFromStatement.WithJoins(BindOpen.Framework.Data.Queries.IDbQueryJoinStatement[])">
            <summary>
            Sets the specified join statement.
            </summary>
            <param name="statements">The DbQueryJoinStatement statements to consider.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="T:BindOpen.Framework.Data.Queries.DbQueryGroupByStatement">
            <summary>
            This class represents the GroupBy statement of a database data query.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.DbQueryGroupByStatement.Fields">
            <summary>
            Fields of this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQueryGroupByStatement.#ctor">
            <summary>
            Instantiates a new instance of the DbQueryGroupByStatement class.
            </summary>
        </member>
        <member name="T:BindOpen.Framework.Data.Queries.DbQueryHavingStatement">
            <summary>
            This class represents the Having statement of a database data query.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.DbQueryHavingStatement.DataExpression">
            <summary>
            The data expression of this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQueryHavingStatement.#ctor">
            <summary>
            Instantiates a new instance of the DbQueryHavingStatement class.
            </summary>
        </member>
        <member name="T:BindOpen.Framework.Data.Queries.DbQueryJoinKind">
            <summary>
            This enumeration lists all the kinds of data query joins.
            </summary>
        </member>
        <member name="F:BindOpen.Framework.Data.Queries.DbQueryJoinKind.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:BindOpen.Framework.Data.Queries.DbQueryJoinKind.Inner">
            <summary>
            Inner.
            </summary>
        </member>
        <member name="F:BindOpen.Framework.Data.Queries.DbQueryJoinKind.Left">
            <summary>
            Left.
            </summary>
        </member>
        <member name="F:BindOpen.Framework.Data.Queries.DbQueryJoinKind.Right">
            <summary>
            Right.
            </summary>
        </member>
        <member name="F:BindOpen.Framework.Data.Queries.DbQueryJoinKind.Union">
            <summary>
            Union.
            </summary>
        </member>
        <member name="T:BindOpen.Framework.Data.Queries.DbQueryJoinStatement">
            <summary>
            This class represents the Join statement of a database data query.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.DbQueryJoinStatement.Kind">
            <summary>
            The kind of join of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.DbQueryJoinStatement.Table">
            <summary>
            The data module of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.DbQueryJoinStatement.Condition">
            <summary>
            The condition of this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQueryJoinStatement.#ctor">
            <summary>
            Instantiates a new instance of the DbQueryJoinStatement class.
            </summary>
        </member>
        <member name="T:BindOpen.Framework.Data.Queries.DbQueryKind">
            <summary>
            This enumeration lists the possible kinds of database data queries.
            </summary>
        </member>
        <member name="F:BindOpen.Framework.Data.Queries.DbQueryKind.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:BindOpen.Framework.Data.Queries.DbQueryKind.Create">
            <summary>
            Create.
            </summary>
        </member>
        <member name="F:BindOpen.Framework.Data.Queries.DbQueryKind.Select">
            <summary>
            Select.
            </summary>
        </member>
        <member name="F:BindOpen.Framework.Data.Queries.DbQueryKind.Update">
            <summary>
            Update.
            </summary>
        </member>
        <member name="F:BindOpen.Framework.Data.Queries.DbQueryKind.Delete">
            <summary>
            Delete.
            </summary>
        </member>
        <member name="F:BindOpen.Framework.Data.Queries.DbQueryKind.Insert">
            <summary>
            Insert.
            </summary>
        </member>
        <member name="F:BindOpen.Framework.Data.Queries.DbQueryKind.Duplicate">
            <summary>
            Duplicate.
            </summary>
        </member>
        <member name="F:BindOpen.Framework.Data.Queries.DbQueryKind.Drop">
            <summary>
            Drop.
            </summary>
        </member>
        <member name="T:BindOpen.Framework.Data.Queries.DbQueryOrderByStatement">
            <summary>
            This class represents the Order-By statement of a database data query.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.DbQueryOrderByStatement.Field">
            <summary>
            The field of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.DbQueryOrderByStatement.Sorting">
            <summary>
            The sorting order of this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQueryOrderByStatement.#ctor">
            <summary>
            Instantiates a new instance of the DbQueryOrderByStatement class.
            </summary>
        </member>
        <member name="T:BindOpen.Framework.Data.Queries.DbQueryUnionKind">
            <summary>
            This enumeration lists all the kinds of data query unions.
            </summary>
        </member>
        <member name="F:BindOpen.Framework.Data.Queries.DbQueryUnionKind.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:BindOpen.Framework.Data.Queries.DbQueryUnionKind.Union">
            <summary>
            Union.
            </summary>
        </member>
        <member name="T:BindOpen.Framework.Data.Queries.DbQueryUnionStatement">
            <summary>
            This class represents a union statement of a database data query.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.DbQueryUnionStatement.Type">
            <summary>
            Type of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.DbQueryUnionStatement.Query">
            <summary>
            Data query of this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbQueryUnionStatement.#ctor">
            <summary>
            Instantiates a new instance of the DbQueryUnionStatement class.
            </summary>
        </member>
        <member name="T:BindOpen.Framework.Data.Queries.DbFactory">
            <summary>
            This class represents a fluent factory of database query.
            </summary>
            <summary>
            This class represents a fluent factory of database query.
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbFactory.DeleteBasic(System.String,BindOpen.Framework.Extensions.Carriers.DbTable)">
            <summary>
            Creates a new Delete basic database query.
            </summary>
            <returns>Returns a new Delete basic database query</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbFactory.DeleteBasic(BindOpen.Framework.Extensions.Carriers.DbTable)">
            <summary>
            Creates a new Delete basic database query.
            </summary>
            <returns>Returns a new Delete basic database query</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbFactory.DropBasic(System.String,BindOpen.Framework.Extensions.Carriers.DbTable)">
            <summary>
            Creates a new Drop basic database query.
            </summary>
            <returns>Returns a new Drop basic database query</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbFactory.DropBasic(BindOpen.Framework.Extensions.Carriers.DbTable)">
            <summary>
            Creates a new Drop basic database query.
            </summary>
            <returns>Returns a new Drop basic database query</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbFactory.DuplicateBasic(System.String,BindOpen.Framework.Extensions.Carriers.DbTable)">
            <summary>
            Creates a new Duplicate basic database query.
            </summary>
            <returns>Returns a new Duplicate basic database query</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbFactory.DuplicateBasic(BindOpen.Framework.Extensions.Carriers.DbTable)">
            <summary>
            Creates a new Duplicate basic database query.
            </summary>
            <returns>Returns a new Duplicate basic database query</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbFactory.InsertBasic(System.String,BindOpen.Framework.Extensions.Carriers.DbTable)">
            <summary>
            Creates a new Insert basic database query.
            </summary>
            <returns>Returns a new Insert basic database query</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbFactory.InsertBasic(BindOpen.Framework.Extensions.Carriers.DbTable)">
            <summary>
            Creates a new Insert basic database query.
            </summary>
            <returns>Returns a new Insert basic database query</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbFactory.SelectBasic(System.String,BindOpen.Framework.Extensions.Carriers.DbTable)">
            <summary>
            Creates a new Select basic database query.
            </summary>
            <returns>Returns a new Select basic database query</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbFactory.SelectBasic(BindOpen.Framework.Extensions.Carriers.DbTable)">
            <summary>
            Creates a new Select basic database query.
            </summary>
            <returns>Returns a new Select basic database query</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbFactory.UpdateBasic(System.String,BindOpen.Framework.Extensions.Carriers.DbTable)">
            <summary>
            Creates a new Update basic database query.
            </summary>
            <returns>Returns a new Update basic database query</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbFactory.UpdateBasic(BindOpen.Framework.Extensions.Carriers.DbTable)">
            <summary>
            Creates a new Update basic database query.
            </summary>
            <returns>Returns a new Update basic database query</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbFactory.CreateAdvancedDelete(System.String,BindOpen.Framework.Extensions.Carriers.DbTable)">
            <summary>
            Creates a new Delete advanced database query.
            </summary>
            <returns>Returns a new Delete advanced database query</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbFactory.CreateAdvancedDelete(BindOpen.Framework.Extensions.Carriers.DbTable)">
            <summary>
            Creates a new Delete advanced database query.
            </summary>
            <returns>Returns a new Delete advanced database query</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbFactory.CreateAdvancedDrop(System.String,BindOpen.Framework.Extensions.Carriers.DbTable)">
            <summary>
            Creates a new Drop advanced database query.
            </summary>
            <returns>Returns a new Drop advanced database query</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbFactory.CreateAdvancedDrop(BindOpen.Framework.Extensions.Carriers.DbTable)">
            <summary>
            Creates a new Drop advanced database query.
            </summary>
            <returns>Returns a new Drop advanced database query</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbFactory.DuplicateAdvanced(System.String,BindOpen.Framework.Extensions.Carriers.DbTable)">
            <summary>
            Creates a new Duplicate advanced database query.
            </summary>
            <returns>Returns a new Duplicate advanced database query</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbFactory.DuplicateAdvanced(BindOpen.Framework.Extensions.Carriers.DbTable)">
            <summary>
            Creates a new Duplicate advanced database query.
            </summary>
            <returns>Returns a new Duplicate advanced database query</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbFactory.InsertAdvanced(System.String,BindOpen.Framework.Extensions.Carriers.DbTable)">
            <summary>
            Creates a new Insert advanced database query.
            </summary>
            <returns>Returns a new Insert advanced database query</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbFactory.InsertAdvanced(BindOpen.Framework.Extensions.Carriers.DbTable)">
            <summary>
            Creates a new Insert advanced database query.
            </summary>
            <returns>Returns a new Insert advanced database query</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbFactory.SelectAdvanced(System.String,BindOpen.Framework.Extensions.Carriers.DbTable)">
            <summary>
            Creates a new Select advanced database query.
            </summary>
            <returns>Returns a new Select advanced database query</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbFactory.SelectAdvanced(BindOpen.Framework.Extensions.Carriers.DbTable)">
            <summary>
            Creates a new Select advanced database query.
            </summary>
            <returns>Returns a new Select advanced database query</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbFactory.UpdateAdvanced(System.String,BindOpen.Framework.Extensions.Carriers.DbTable)">
            <summary>
            Creates a new Update advanced database query.
            </summary>
            <returns>Returns a new Update advanced database query</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbFactory.UpdateAdvanced(BindOpen.Framework.Extensions.Carriers.DbTable)">
            <summary>
            Creates a new Update advanced database query.
            </summary>
            <returns>Returns a new Update advanced database query</returns>
        </member>
        <member name="T:BindOpen.Framework.Data.Queries.DbFactory">
            <summary>
            This class represents a factory of basic database query statement.
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbFactory.CreateFrom(BindOpen.Framework.Extensions.Carriers.DbTable)">
            <summary>
            Creates a new From statement.
            </summary>
            <param name="table">The table to consider.</param>
            <returns>Returns a new From statement.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbFactory.CreateJoin(BindOpen.Framework.Extensions.Carriers.DbTable)">
            <summary>
            Creates a new Join statement.
            </summary>
            <param name="table">The table to consider.</param>
            <returns>Returns a new From statement.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbFactory.CreateJoin(BindOpen.Framework.Data.Queries.DbQueryJoinKind,BindOpen.Framework.Extensions.Carriers.DbTable,BindOpen.Framework.Core.Data.Expression.DataExpression)">
            <summary>
            Creates a new Join statement.
            </summary>
            <param name="kind">The kind to consider.</param>
            <param name="table">The table to consider.</param>
            <param name="condition">The condition to consider.</param>
            <returns>Returns a new From statement.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbFactory.CreateJoin(BindOpen.Framework.Data.Queries.DbQueryJoinKind,BindOpen.Framework.Extensions.Carriers.DbTable,System.String)">
            <summary>
            Creates a new Join statement.
            </summary>
            <param name="kind">The kind to consider.</param>
            <param name="table">The table to consider.</param>
            <param name="query">The query to consider.</param>
            <returns>Returns a new From statement.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.DbFactory.CreateJoin(BindOpen.Framework.Data.Queries.DbQueryJoinKind,BindOpen.Framework.Extensions.Carriers.DbTable,BindOpen.Framework.Extensions.Carriers.DbField,BindOpen.Framework.Extensions.Carriers.DbField)">
            <summary>
            Creates a new Join statement.
            </summary>
            <param name="kind">The kind to consider.</param>
            <param name="table">The table to consider.</param>
            <param name="field1">The field1 to consider.</param>
            <param name="field2">The field2 to consider.</param>
        </member>
        <member name="T:BindOpen.Framework.Data.Queries.IAdvancedDbQuery">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.IAdvancedDbQuery.FromStatements">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.IAdvancedDbQuery.GroupByClause">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.IAdvancedDbQuery.HavingClause">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.IAdvancedDbQuery.IsDistinct">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.IAdvancedDbQuery.OrderByStatements">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.IAdvancedDbQuery.Top">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.IAdvancedDbQuery.WhereClause">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.IAdvancedDbQuery.WithFields(BindOpen.Framework.Extensions.Carriers.DbField[])">
            <summary>
            Sets the specified fields.
            </summary>
            <param name="fields">The fields to consider.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.IAdvancedDbQuery.From(BindOpen.Framework.Data.Queries.IDbQueryFromStatement[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.IAdvancedDbQuery.GroupBy(BindOpen.Framework.Data.Queries.IDbQueryGroupByStatement)">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.IAdvancedDbQuery.Having(BindOpen.Framework.Data.Queries.IDbQueryHavingStatement)">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.IAdvancedDbQuery.AsDistinct">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.IAdvancedDbQuery.OrderBy(BindOpen.Framework.Data.Queries.IDbQueryOrderByStatement[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.IAdvancedDbQuery.WithTop(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.IAdvancedDbQuery.Where(BindOpen.Framework.Core.Data.Expression.IDataExpression)">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.IAdvancedDbQuery.WithTableAlias(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="T:BindOpen.Framework.Data.Queries.IBasicDbQuery">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.IBasicDbQuery.FromStatements">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.IBasicDbQuery.IdFields">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.IBasicDbQuery.IsDistinct">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.IBasicDbQuery.OrderByStatements">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.IBasicDbQuery.Top">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.IBasicDbQuery.GetIdFieldWithBoundFieldName(System.String)">
            <summary>
            
            </summary>
            <param name="boundFieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.IBasicDbQuery.WithFields(BindOpen.Framework.Extensions.Carriers.DbField[])">
            <summary>
            Sets the specified fields.
            </summary>
            <param name="fields">The fields to consider.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.IBasicDbQuery.From(BindOpen.Framework.Data.Queries.IDbQueryFromStatement[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.IBasicDbQuery.WithIdFields(BindOpen.Framework.Extensions.Carriers.DbField[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.IBasicDbQuery.AsDistinct">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.IBasicDbQuery.OrderBy(BindOpen.Framework.Data.Queries.IDbQueryOrderByStatement[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.IBasicDbQuery.WithTop(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.IBasicDbQuery.WithTableAlias(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="T:BindOpen.Framework.Data.Queries.IDbQuery">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.IDbQuery.DataModule">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.IDbQuery.DataTable">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.IDbQuery.DataTableAlias">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.IDbQuery.Fields">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.IDbQuery.Kind">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.IDbQuery.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.IDbQuery.Schema">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.IDbQuery.GetDataFieldWithName(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.IDbQuery.GetFieldWithBoundFieldName(System.String)">
            <summary>
            
            </summary>
            <param name="boundFieldName"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.IDbQuery.GetForeignKeyDataFields">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.IDbQuery.GetKeyDataFields">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.IDbQuery.GetPrimaryKeyDataFields">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:BindOpen.Framework.Data.Queries.IDbQueryFromStatement">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.IDbQueryFromStatement.JoinStatements">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.IDbQueryFromStatement.UnionStatement">
            <summary>
            
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.IDbQueryFromStatement.WithUnion(BindOpen.Framework.Data.Queries.IDbQueryUnionStatement)">
            <summary>
            
            </summary>
            <param name="statement"></param>
            <returns></returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.IDbQueryFromStatement.WithJoin(BindOpen.Framework.Data.Queries.IDbQueryJoinStatement)">
            <summary>
            Sets the specified join statement.
            </summary>
            <param name="statement">The join statement to consider.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.IDbQueryFromStatement.WithJoins(BindOpen.Framework.Data.Queries.IDbQueryJoinStatement[])">
            <summary>
            Sets the specified join statement.
            </summary>
            <param name="statements">The DbQueryJoinStatement statements to consider.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="T:BindOpen.Framework.Data.Queries.IDbQueryGroupByStatement">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.IDbQueryGroupByStatement.Fields">
            <summary>
            
            </summary>
        </member>
        <member name="T:BindOpen.Framework.Data.Queries.IDbQueryHavingStatement">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.IDbQueryHavingStatement.DataExpression">
            <summary>
            
            </summary>
        </member>
        <member name="T:BindOpen.Framework.Data.Queries.IDbQueryJoinStatement">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.IDbQueryJoinStatement.Condition">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.IDbQueryJoinStatement.Kind">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.IDbQueryJoinStatement.Table">
            <summary>
            
            </summary>
        </member>
        <member name="T:BindOpen.Framework.Data.Queries.IDbQueryOrderByStatement">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.IDbQueryOrderByStatement.Field">
            <summary>
            
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.IDbQueryOrderByStatement.Sorting">
            <summary>
            
            </summary>
        </member>
        <member name="T:BindOpen.Framework.Data.Queries.IDbQueryUnionStatement">
            <summary>
            This interface defines the statement data query union.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.IDbQueryUnionStatement.Type">
            <summary>
            The type.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Data.Queries.IDbQueryUnionStatement.Query">
            <summary>
            The query.
            </summary>
        </member>
        <member name="T:BindOpen.Framework.Data.Queries.StoredProcedureDbQuery">
            <summary>
            This class represents an simple database data query.
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.StoredProcedureDbQuery.#ctor">
            <summary>
            Instantiates a new instance of the StoredProcedureDbQuery class.
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Data.Queries.StoredProcedureDbQuery.#ctor(System.String,System.String,System.String)">
            <summary>
            Instantiates a new instance of the StoredProcedureDbQuery class.
            </summary>
            <param name="dataModule">Name of the data module.</param>
            <param name="schema">Schema of the data module.</param>
            <param name="storedProcedureName">Name of stored procedure.</param>
        </member>
        <member name="T:BindOpen.Framework.Extensions.Carriers.DatabaseCarrierKind">
            <summary>
            This enumeration lists all the possible kinds of database carriers.
            </summary>
        </member>
        <member name="F:BindOpen.Framework.Extensions.Carriers.DatabaseCarrierKind.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:BindOpen.Framework.Extensions.Carriers.DatabaseCarrierKind.Any">
            <summary>
            Any.
            </summary>
        </member>
        <member name="F:BindOpen.Framework.Extensions.Carriers.DatabaseCarrierKind.DbField">
            <summary>
            Database field.
            </summary>
        </member>
        <member name="F:BindOpen.Framework.Extensions.Carriers.DatabaseCarrierKind.DbTable">
            <summary>
            Database table.
            </summary>
        </member>
        <member name="T:BindOpen.Framework.Extensions.Carriers.DatabaseCarrierKindExtension">
            <summary>
            This class represents an extension of the DatabaseCarrierKind enumeration.
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Carriers.DatabaseCarrierKindExtension.GetUniqueName(BindOpen.Framework.Extensions.Carriers.DatabaseCarrierKind)">
            <summary>
            Gets the unique name corresponding to the specified carrier kind.
            </summary>
            <param name="aDatabaseCarrierKind">The carrier kind to consider.</param>
            <returns>The result object.</returns>
        </member>
        <member name="T:BindOpen.Framework.Extensions.Carriers.DbField">
            <summary>
            This class represents a database data field.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Extensions.Carriers.DbField.IsAll">
            <summary>
            Indicates wheteher this instance represents all the fields.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Extensions.Carriers.DbField.DataModule">
            <summary>
            Data module of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Extensions.Carriers.DbField.Schema">
            <summary>
            Data module of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Extensions.Carriers.DbField.DataTable">
            <summary>
            Data table of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Extensions.Carriers.DbField.DataTableAlias">
            <summary>
            Alias of the data table of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Extensions.Carriers.DbField.Alias">
            <summary>
            Alias of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Extensions.Carriers.DbField.Size">
            <summary>
            Size of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Extensions.Carriers.DbField.Value">
            <summary>
            Value of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Extensions.Carriers.DbField.Query">
            <summary>
            Value of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Extensions.Carriers.DbField.IsKey">
            <summary>
            Indicates wheteher this instance is a key.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Extensions.Carriers.DbField.IsForeignKey">
            <summary>
            Indicates wheteher this instance is a foreign key.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Extensions.Carriers.DbField.IsNameAsScript">
            <summary>
            Indicates wheteher the name of this instance can be defined by a script.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Extensions.Carriers.DbField.ValueType">
            <summary>
            Type of value of this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Carriers.DbField.#ctor">
            <summary>
            Instantiates a new instance of the DbField class.
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Carriers.DbField.GetName">
            <summary>
            Get the name of this instance that is the alias if there is or the name otherwise.
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Carriers.DbField.ToDataExpression">
            <summary>
            Gets the data expression of this instance.
            </summary>
            <returns>Returns the data expression of this instance.</returns>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Carriers.DbField.SetValue(BindOpen.Framework.Core.Data.Expression.DataExpression)">
            <summary>
            Sets the expression value of this instance.
            </summary>
            <param name="expression">Data expression value of the instance.</param>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Carriers.DbField.SetLiteralValue(System.String)">
            <summary>
            Sets the literal value of this instance.
            </summary>
            <param name="text">The literal value.</param>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Carriers.DbField.SetScriptValue(System.String)">
            <summary>
            Sets the script value of this instance.
            </summary>
            <param name="text">The script value.</param>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Carriers.DbField.WithDataModule(System.String)">
            <summary>
            Sets the specified data module.
            </summary>
            <param name="dataModule">The data module to consider.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Carriers.DbField.WithDataTable(System.String)">
            <summary>
            Sets the specified data table.
            </summary>
            <param name="dataTable">The data table to consider.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Carriers.DbField.WithSchema(System.String)">
            <summary>
            Sets the specified schema.
            </summary>
            <param name="schema">The schema to consider.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Carriers.DbField.WithAlias(System.String)">
            <summary>
            Sets the specified alias.
            </summary>
            <param name="alias">The alias to consider.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Carriers.DbField.WithSize(System.Int32)">
            <summary>
            Sets the specified size.
            </summary>
            <param name="size">The size to consider.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Carriers.DbField.AsAll">
            <summary>
            Indicates that this instance represents all fields.
            </summary>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Carriers.DbField.AsKey">
            <summary>
            Indicates that this instance represents a key.
            </summary>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Carriers.DbField.WithNameAsScript">
            <summary>
            Indicates that the name of this instance is as script.
            </summary>
            <returns>Returns this instance.</returns>
        </member>
        <member name="T:BindOpen.Framework.Extensions.Carriers.DbTable">
            <summary>
            This class represents a database data table.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Extensions.Carriers.DbTable.DataModule">
            <summary>
            Data module of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Extensions.Carriers.DbTable.Schema">
            <summary>
            Data module of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Extensions.Carriers.DbTable.Alias">
            <summary>
            Alias of this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Carriers.DbTable.#ctor">
            <summary>
            Instantiates a new instance of the DbDataTable class.
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Carriers.DbTable.WithDataModule(System.String)">
            <summary>
            Sets the specified data module.
            </summary>
            <param name="dataModule">The data module to consider.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Carriers.DbTable.WithSchema(System.String)">
            <summary>
            Sets the specified schema.
            </summary>
            <param name="schema">The schema to consider.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Carriers.DbTable.WithAlias(System.String)">
            <summary>
            Sets the specified alias.
            </summary>
            <param name="alias">The alias to consider.</param>
            <returns>Returns this instance.</returns>
        </member>
        <member name="T:BindOpen.Framework.Extensions.Carriers.DbFieldFactory">
            <summary>
            This static class represents a factory of data field.
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Carriers.DbFieldFactory.Create(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new instance of the DbField class.
            </summary>
            <param name="name">The name to consider.</param>
            <param name="tableName">The data table to consider.</param>
            <param name="schema">The schema to consider.</param>
            <param name="dataModule">The data module to consider.</param>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Carriers.DbFieldFactory.CreateAsLiteral(System.String,System.Object,BindOpen.Framework.Core.Data.Common.DataValueType)">
            <summary>
            Creates a new instance of the DbField class.
            </summary>
            <param name="name">The name to consider.</param>
            <param name="value">The value to consider.</param>
            <param name="valueType">The value type to consider.</param>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Carriers.DbFieldFactory.CreateAsLiteral(System.String,System.String,System.Object,BindOpen.Framework.Core.Data.Common.DataValueType)">
            <summary>
            Creates a new instance of the DbField class.
            </summary>
            <param name="name">The name to consider.</param>
            <param name="tableName">The data table to consider.</param>
            <param name="valueType">The value type to consider.</param>
            <param name="value">The value to consider.</param>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Carriers.DbFieldFactory.CreateAsLiteral(System.String,System.String,System.String,System.String,System.Object,BindOpen.Framework.Core.Data.Common.DataValueType)">
            <summary>
            Creates a new instance of the DbField class.
            </summary>
            <param name="name">The name to consider.</param>
            <param name="tableName">The data table to consider.</param>
            <param name="schema">The schema to consider.</param>
            <param name="dataModule">The data module to consider.</param>
            <param name="valueType">The value type to consider.</param>
            <param name="value">The value to consider.</param>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Carriers.DbFieldFactory.CreateAsScript(System.String,System.Object,BindOpen.Framework.Core.Data.Common.DataValueType)">
            <summary>
            Creates a new instance of the DbField class.
            </summary>
            <param name="name">The name to consider.</param>
            <param name="value">The value to consider.</param>
            <param name="valueType">The value type to consider.</param>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Carriers.DbFieldFactory.CreateAsScript(System.String,System.String,System.Object,BindOpen.Framework.Core.Data.Common.DataValueType)">
            <summary>
            Creates a new instance of the DbField class.
            </summary>
            <param name="name">The name to consider.</param>
            <param name="tableName">The data table to consider.</param>
            <param name="valueType">The value type to consider.</param>
            <param name="value">The value to consider.</param>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Carriers.DbFieldFactory.CreateAsScript(System.String,System.String,System.String,System.String,System.Object,BindOpen.Framework.Core.Data.Common.DataValueType)">
            <summary>
            Creates a new instance of the DbField class.
            </summary>
            <param name="name">The name to consider.</param>
            <param name="tableName">The data table to consider.</param>
            <param name="schema">The schema to consider.</param>
            <param name="dataModule">The data module to consider.</param>
            <param name="valueType">The value type to consider.</param>
            <param name="value">The value to consider.</param>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Carriers.DbFieldFactory.CreateAsQuery(System.String,BindOpen.Framework.Data.Queries.IDbQuery)">
            <summary>
            Creates a new instance of the DbField class.
            </summary>
            <param name="name">The name to consider.</param>
            <param name="query">The query to consider.</param>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Carriers.DbFieldFactory.CreateAsQuery(System.String,System.String,BindOpen.Framework.Data.Queries.IDbQuery)">
            <summary>
            Creates a new instance of the DbField class.
            </summary>
            <param name="name">The name to consider.</param>
            <param name="tableName">The data table to consider.</param>
            <param name="query">The query to consider.</param>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Carriers.DbFieldFactory.CreateAsQuery(System.String,System.String,System.String,System.String,BindOpen.Framework.Data.Queries.IDbQuery)">
            <summary>
            Creates a new instance of the DbField class.
            </summary>
            <param name="name">The name to consider.</param>
            <param name="tableName">The data table to consider.</param>
            <param name="schema">The schema to consider.</param>
            <param name="dataModule">The data module to consider.</param>
            <param name="query">The query to consider.</param>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Carriers.DbFieldFactory.CreateAsOther(System.String,BindOpen.Framework.Extensions.Carriers.DbField)">
            <summary>
            Creates a new instance of the DbField class.
            </summary>
            <param name="name">The name to consider.</param>
            <param name="otherField">The other field to consider.</param>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Carriers.DbFieldFactory.CreateAsOther(System.String,System.String,BindOpen.Framework.Extensions.Carriers.DbField)">
            <summary>
            Creates a new instance of the DbField class.
            </summary>
            <param name="name">The name to consider.</param>
            <param name="tableName">The data table to consider.</param>
            <param name="otherField">The other field to consider.</param>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Carriers.DbFieldFactory.CreateAsOther(System.String,System.String,System.String,System.String,BindOpen.Framework.Extensions.Carriers.DbField)">
            <summary>
            Creates a new instance of the DbField class.
            </summary>
            <param name="name">The name to consider.</param>
            <param name="tableName">The data table to consider.</param>
            <param name="schema">The schema to consider.</param>
            <param name="dataModule">The data module to consider.</param>
            <param name="otherField">The other field to consider.</param>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Carriers.DbFieldFactory.CreateAsAll(System.String,System.String,System.String)">
            <summary>
            Creates a new instance of the DbField class.
            </summary>
            <param name="tableName">The data table to consider.</param>
            <param name="schema">The schema to consider.</param>
            <param name="dataModule">The data module to consider.</param>
        </member>
        <member name="T:BindOpen.Framework.Extensions.Carriers.DbTableFactory">
            <summary>
            This static class represents a factory of data table.
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Carriers.DbTableFactory.Create(System.String,System.String,System.String)">
            <summary>
            Creates a new instance of the DbTable class.
            </summary>
            <param name="name">The name to consider.</param>
            <param name="schema">The schema to consider.</param>
            <param name="dataModuleName">The name of the data module to consider.</param>
        </member>
        <member name="T:BindOpen.Framework.Extensions.Extension_database">
            <summary>
            This class represents the database extension.
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Extension_database.GetUniqueName_database(System.String)">
            <summary>
            Gets the database unique name.
            </summary>
            <param name="uniqueName">The unique name to consider.</param>
            <returns>The result object.</returns>
        </member>
        <member name="T:BindOpen.Framework.Databases.Extensions.Connectors.DatabaseConnector">
            <summary>
            This class defines a database connector.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Databases.Extensions.Connectors.DatabaseConnector.QueryBuilder">
            <summary>
            The provider of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Databases.Extensions.Connectors.DatabaseConnector.Provider">
            <summary>
            The provider of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Databases.Extensions.Connectors.DatabaseConnector.ServerAddress">
            <summary>
            The server address of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Databases.Extensions.Connectors.DatabaseConnector.InitialCatalog">
            <summary>
            The initial catalog of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Databases.Extensions.Connectors.DatabaseConnector.IntegratedSecurity">
            <summary>
            The integrated security of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Databases.Extensions.Connectors.DatabaseConnector.UserName">
            <summary>
            The user name of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Databases.Extensions.Connectors.DatabaseConnector.Password">
            <summary>
            The password of this instance.
            </summary>
        </member>
        <member name="P:BindOpen.Framework.Databases.Extensions.Connectors.DatabaseConnector.DatabaseConnectorKind">
            <summary>
            The database kind of this instance.
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Databases.Extensions.Connectors.DatabaseConnector.#ctor">
            <summary>
            Instantiates a new instance of the DatabaseConnector class.
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Databases.Extensions.Connectors.DatabaseConnector.#ctor(System.String,System.String)">
            <summary>
            Instantiates a new instance of the DatabaseConnector class.
            </summary>
            <param name="name">The name of this instance.</param>
            <param name="connectionString">The connection string to consider.</param>
        </member>
        <member name="M:BindOpen.Framework.Databases.Extensions.Connectors.DatabaseConnector.GetSqlText(BindOpen.Framework.Data.Queries.IDbQuery,BindOpen.Framework.Core.System.Scripting.IBdoScriptVariableSet,BindOpen.Framework.Core.System.Diagnostics.IBdoLog)">
            <summary>
            Gets the SQL text of the specified query.
            </summary>
            <param name="query">The query to consider.</param>
            <param name="scriptVariableSet">The script variable set to consider.</param>
            <param name="log">The log to consider.</param>
            <returns>Returns the SQL text of the specified query.</returns>
        </member>
        <member name="M:BindOpen.Framework.Databases.Extensions.Connectors.DatabaseConnector.UpdateConnectionString(System.String)">
            <summary>
            Updates the connection string.
            </summary>
            <param name="connectionString">The connection string to consider.</param>
            <returns>Returns a clone of this instance.</returns>
        </member>
        <member name="M:BindOpen.Framework.Databases.Extensions.Connectors.DatabaseConnector.GetDbConnection">
            <summary>
            Gets the database connection of this instance.
            </summary>
            <returns>Returns the connection of this instance.</returns>
        </member>
        <member name="M:BindOpen.Framework.Databases.Extensions.Connectors.DatabaseConnector.GuessDatabaseConnectorKind(System.String)">
            <summary>
            Gets the database kind from the specified connection string.
            </summary>
            <param name="connectionString">The connection string.</param>
            <returns>The database provider  of the specified connection string.</returns>
        </member>
        <member name="M:BindOpen.Framework.Databases.Extensions.Connectors.DatabaseConnector.GuessDatabaseConnectorKind">
            <summary>
            Guesses the database kind of this instance.
            </summary>
            <returns>The database kind of this instance.</returns>
        </member>
        <member name="M:BindOpen.Framework.Databases.Extensions.Connectors.DatabaseConnector.ExecuteNonQuery(System.String,BindOpen.Framework.Core.System.Scripting.IBdoScriptVariableSet,BindOpen.Framework.Core.System.Diagnostics.IBdoLog)">
            <summary>
            Executes a database data query that returns nothing.
            </summary>
            <param name="queryText">The text to execute.</param>
            <param name="scriptVariableSet">The interpretation variables to consider.</param>
            <param name="log">The log to consider.</param>
            <returns>The log of the data query execution task.</returns>
        </member>
        <member name="M:BindOpen.Framework.Databases.Extensions.Connectors.DatabaseConnector.ExecuteQuery(System.String,System.Data.IDataReader@,BindOpen.Framework.Core.System.Scripting.IBdoScriptVariableSet,BindOpen.Framework.Core.System.Diagnostics.IBdoLog)">
            <summary>
            Executes a database data query putting the result into a data reader.
            </summary>
            <param name="queryText">The text to execute.</param>
            <param name="dataReader">The output data reader.</param>
            <param name="scriptVariableSet">The interpretation variables to consider.</param>
            <param name="log">The log to consider.</param>
            <returns>The log of the data query execution task.</returns>
        </member>
        <member name="M:BindOpen.Framework.Databases.Extensions.Connectors.DatabaseConnector.ExecuteQuery(System.String,System.Data.DataSet@,BindOpen.Framework.Core.System.Scripting.IBdoScriptVariableSet,BindOpen.Framework.Core.System.Diagnostics.IBdoLog)">
            <summary>
            Executes a database data query putting the result into a dataset.
            </summary>
            <param name="queryText">The text to execute.</param>
            <param name="dataSet">The output dataset.</param>
            <param name="scriptVariableSet">The interpretation variables to consider.</param>
            <param name="log">The log to consider.</param>
            <returns>The log of the data query execution task.</returns>
        </member>
        <member name="M:BindOpen.Framework.Databases.Extensions.Connectors.DatabaseConnector.GetIdentity(System.Int64@,BindOpen.Framework.Core.System.Diagnostics.IBdoLog)">
            <summary>
            Gets the identity of the last inserted item
            </summary>
            <param name="id">The long identifier to populate.</param>
            <param name="log">The log to consider.</param>
        </member>
        <member name="M:BindOpen.Framework.Databases.Extensions.Connectors.DatabaseConnector.UpdateDataTable(System.String,System.Data.DataTable,BindOpen.Framework.Core.System.Diagnostics.IBdoLog)">
            <summary>
            Executes the specified data query and updates the specified data table.
            </summary>
            <param name="queryText">The text to execute.</param>
            <param name="dataTable">The data table to update.</param>
            <param name="log">The log to consider.</param>
            <returns>The log of the task.</returns>
        </member>
        <member name="M:BindOpen.Framework.Databases.Extensions.Connectors.DatabaseConnector.UpdateDataSet(System.String,System.Data.DataSet,System.Collections.Generic.List{System.String},BindOpen.Framework.Core.System.Diagnostics.IBdoLog)">
            <summary>
            Executes the specified data query and updates the specified data table.
            </summary>
            <param name="queryText">The text to execute.</param>
            <param name="dataSet">The data set to update.</param>
            <param name="tableNames">The table names to consider.</param>
            <param name="log">The log to consider.</param>
            <returns>The log of the task.</returns>
        </member>
        <member name="M:BindOpen.Framework.Databases.Extensions.Connectors.DatabaseConnector.SetConnector(BindOpen.Framework.Core.Extensions.Runtime.IBdoConnector)">
            <summary>
            
            </summary>
            <param name="connector"></param>
        </member>
        <member name="T:BindOpen.Framework.Databases.Extensions.Connectors.DatabaseConnectorKind">
            <summary>
            This enumeration lists all the possible kinds of database connectors.
            </summary>
        </member>
        <member name="F:BindOpen.Framework.Databases.Extensions.Connectors.DatabaseConnectorKind.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:BindOpen.Framework.Databases.Extensions.Connectors.DatabaseConnectorKind.Any">
            <summary>
            Any.
            </summary>
        </member>
        <member name="F:BindOpen.Framework.Databases.Extensions.Connectors.DatabaseConnectorKind.MSSqlServer">
            <summary>
            Microsoft SQL Server.
            </summary>
        </member>
        <member name="F:BindOpen.Framework.Databases.Extensions.Connectors.DatabaseConnectorKind.Oracle">
            <summary>
            Oracle.
            </summary>
        </member>
        <member name="F:BindOpen.Framework.Databases.Extensions.Connectors.DatabaseConnectorKind.MySQL">
            <summary>
            MySQL.
            </summary>
        </member>
        <member name="F:BindOpen.Framework.Databases.Extensions.Connectors.DatabaseConnectorKind.PostgreSql">
            <summary>
            Postgre SQL.
            </summary>
        </member>
        <member name="T:BindOpen.Framework.Databases.Extensions.Connectors.ConnectorKind_databaseExtension">
            <summary>
            This class represents an extension of the ConnectorKind_database enumeration.
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Databases.Extensions.Connectors.ConnectorKind_databaseExtension.GetUniqueName(BindOpen.Framework.Databases.Extensions.Connectors.DatabaseConnectorKind)">
            <summary>
            Gets the unique name corresponding to the specified connector kind.
            </summary>
            <param name="connectorKind_database">The connector kind to consider.</param>
            <returns>The result object.</returns>
        </member>
        <member name="T:BindOpen.Framework.Extensions.Scriptwords.ScriptHelper_Database">
            <summary>
            This class represents a script helper concerning database.
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Scriptwords.ScriptHelper_Database.GetSqlDataFieldString(BindOpen.Framework.Extensions.Carriers.DbField)">
            <summary>
            Gets the BdO string corresponding to the specified data field.
            </summary>
            <param name="field">The database date field to consider.</param>
            <returns>The string that allows to filter users and workgroup users.</returns>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Scriptwords.ScriptHelper_Database.GetSqlNumberFilterString(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Gets the BdO filter string that filters number values.
            </summary>
            <param name="sqlDbFieldString">The Sql script representing the data field to consider.</param>
            <param name="values">Values used to filter.</param>
            <returns>The string that allows to filter users and workgroup users.</returns>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Scriptwords.ScriptHelper_Database.GetSqlNumberAndFilterString(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Gets the BdO filter string that AND filters number values.
            </summary>
            <param name="sqlDbFieldString">The Sql script representing the data field to consider.</param>
            <param name="values">Values used to filter.</param>
            <returns>The string that allows to filter users and workgroup users.</returns>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Scriptwords.ScriptHelper_Database.GetSqlNumberOrFilterString(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Gets the BdO filter string that AND filters number values.
            </summary>
            <param name="sqlDbFieldString">The Sql script representing the data field to consider.</param>
            <param name="values">Values used to filter.</param>
            <returns>The string that allows to filter users and workgroup users.</returns>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Scriptwords.ScriptHelper_Database.GetSqlTextFilterString(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Gets the BdO filter string that filters text values.
            </summary>
            <param name="sqlDbFieldString">The Sql script representing the data field to consider.</param>
            <param name="values">Values used to filter.</param>
            <returns>The string that allows to filter users and workgroup users.</returns>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Scriptwords.ScriptHelper_Database.GetSqlTextAndFilterString(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Gets the BdO filter string that AND filters text values.
            </summary>
            <param name="sqlDbFieldString">The Sql script representing the data field to consider.</param>
            <param name="values">Values used to filter.</param>
            <returns>The string that allows to filter users and workgroup users.</returns>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Scriptwords.ScriptHelper_Database.GetSqlTextOrFilterString(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Gets the BdO filter string that AND filters text values.
            </summary>
            <param name="sqlDbFieldString">The Sql script representing the data field to consider.</param>
            <param name="values">Values used to filter.</param>
            <returns>The string that allows to filter users and workgroup users.</returns>
        </member>
        <member name="T:BindOpen.Framework.Extensions.Scriptwords.ScriptVariableKey_Database">
            <summary>
            This class represents the database script variable key.
            </summary>
        </member>
        <member name="F:BindOpen.Framework.Extensions.Scriptwords.ScriptVariableKey_Database.DbBuilder">
            <summary>
            database builder
            </summary>
        </member>
        <member name="T:BindOpen.Framework.Extensions.Scriptwords.ScriptwordDefinition_Database">
            <summary>
            This class represents a 'Database' script word definition.
            </summary>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlCount(BindOpen.Framework.Core.Application.Scopes.IBdoScope,BindOpen.Framework.Core.System.Scripting.IBdoScriptVariableSet,BindOpen.Framework.Core.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word $SQLCOUNT.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlSum(BindOpen.Framework.Core.Application.Scopes.IBdoScope,BindOpen.Framework.Core.System.Scripting.IBdoScriptVariableSet,BindOpen.Framework.Core.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word $SQLSUM.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlAverage(BindOpen.Framework.Core.Application.Scopes.IBdoScope,BindOpen.Framework.Core.System.Scripting.IBdoScriptVariableSet,BindOpen.Framework.Core.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word $SQLAVG.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlGetCurrentDate(BindOpen.Framework.Core.Application.Scopes.IBdoScope,BindOpen.Framework.Core.System.Scripting.IBdoScriptVariableSet,BindOpen.Framework.Core.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word $SQLGETCURRENTDATE.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlTrue(BindOpen.Framework.Core.Application.Scopes.IBdoScope,BindOpen.Framework.Core.System.Scripting.IBdoScriptVariableSet,BindOpen.Framework.Core.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word $SQLTRUE.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlIf(BindOpen.Framework.Core.Application.Scopes.IBdoScope,BindOpen.Framework.Core.System.Scripting.IBdoScriptVariableSet,BindOpen.Framework.Core.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word $SQLIF.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlNot(BindOpen.Framework.Core.Application.Scopes.IBdoScope,BindOpen.Framework.Core.System.Scripting.IBdoScriptVariableSet,BindOpen.Framework.Core.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word $SQLNOT.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">The set of variables that can be used for interpretation.</param>
            <param name="scriptWord">The script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlOr(BindOpen.Framework.Core.Application.Scopes.IBdoScope,BindOpen.Framework.Core.System.Scripting.IBdoScriptVariableSet,BindOpen.Framework.Core.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word $SQLOR.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlAnd(BindOpen.Framework.Core.Application.Scopes.IBdoScope,BindOpen.Framework.Core.System.Scripting.IBdoScriptVariableSet,BindOpen.Framework.Core.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word $SQLAND.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlXor(BindOpen.Framework.Core.Application.Scopes.IBdoScope,BindOpen.Framework.Core.System.Scripting.IBdoScriptVariableSet,BindOpen.Framework.Core.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word $SQLXOR.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlEq(BindOpen.Framework.Core.Application.Scopes.IBdoScope,BindOpen.Framework.Core.System.Scripting.IBdoScriptVariableSet,BindOpen.Framework.Core.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word $SQLEQ.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlDiff(BindOpen.Framework.Core.Application.Scopes.IBdoScope,BindOpen.Framework.Core.System.Scripting.IBdoScriptVariableSet,BindOpen.Framework.Core.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word $SQLDIFF.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlGt(BindOpen.Framework.Core.Application.Scopes.IBdoScope,BindOpen.Framework.Core.System.Scripting.IBdoScriptVariableSet,BindOpen.Framework.Core.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word $SQLGT.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlGte(BindOpen.Framework.Core.Application.Scopes.IBdoScope,BindOpen.Framework.Core.System.Scripting.IBdoScriptVariableSet,BindOpen.Framework.Core.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word $SQLGTE.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlLt(BindOpen.Framework.Core.Application.Scopes.IBdoScope,BindOpen.Framework.Core.System.Scripting.IBdoScriptVariableSet,BindOpen.Framework.Core.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word $SQLLT.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlLte(BindOpen.Framework.Core.Application.Scopes.IBdoScope,BindOpen.Framework.Core.System.Scripting.IBdoScriptVariableSet,BindOpen.Framework.Core.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word $SQLLTE.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlIsNull(BindOpen.Framework.Core.Application.Scopes.IBdoScope,BindOpen.Framework.Core.System.Scripting.IBdoScriptVariableSet,BindOpen.Framework.Core.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word $SQLISNULL.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlConvertToText(BindOpen.Framework.Core.Application.Scopes.IBdoScope,BindOpen.Framework.Core.System.Scripting.IBdoScriptVariableSet,BindOpen.Framework.Core.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word $SQLCONVERTTOTEXT.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlText(BindOpen.Framework.Core.Application.Scopes.IBdoScope,BindOpen.Framework.Core.System.Scripting.IBdoScriptVariableSet,BindOpen.Framework.Core.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word $SQLTEXT.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlLike(BindOpen.Framework.Core.Application.Scopes.IBdoScope,BindOpen.Framework.Core.System.Scripting.IBdoScriptVariableSet,BindOpen.Framework.Core.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word $SQLLIKE.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlReplace(BindOpen.Framework.Core.Application.Scopes.IBdoScope,BindOpen.Framework.Core.System.Scripting.IBdoScriptVariableSet,BindOpen.Framework.Core.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word $SQLREPLACE.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlConcatenate(BindOpen.Framework.Core.Application.Scopes.IBdoScope,BindOpen.Framework.Core.System.Scripting.IBdoScriptVariableSet,BindOpen.Framework.Core.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word $SQLCONCATENATE.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlNull(BindOpen.Framework.Core.Application.Scopes.IBdoScope,BindOpen.Framework.Core.System.Scripting.IBdoScriptVariableSet,BindOpen.Framework.Core.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word $SQLNULL.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlDatabase(BindOpen.Framework.Core.Application.Scopes.IBdoScope,BindOpen.Framework.Core.System.Scripting.IBdoScriptVariableSet,BindOpen.Framework.Core.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word %SQLDATABASE.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlDatabase_SqlSchema(BindOpen.Framework.Core.Application.Scopes.IBdoScope,BindOpen.Framework.Core.System.Scripting.IBdoScriptVariableSet,BindOpen.Framework.Core.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word [%DATABASE->]%SCHEMA.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlDatabase_SqlTable(BindOpen.Framework.Core.Application.Scopes.IBdoScope,BindOpen.Framework.Core.System.Scripting.IBdoScriptVariableSet,BindOpen.Framework.Core.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word [%DATABASE->]%TABLE.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlDatabase_SqlTable_SqlField(BindOpen.Framework.Core.Application.Scopes.IBdoScope,BindOpen.Framework.Core.System.Scripting.IBdoScriptVariableSet,BindOpen.Framework.Core.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word [[%DATABASE->]%TABLE->]%FIELD.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlNewGuid(BindOpen.Framework.Core.Application.Scopes.IBdoScope,BindOpen.Framework.Core.System.Scripting.IBdoScriptVariableSet,BindOpen.Framework.Core.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word $SQLNEWGUID.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlRandom(BindOpen.Framework.Core.Application.Scopes.IBdoScope,BindOpen.Framework.Core.System.Scripting.IBdoScriptVariableSet,BindOpen.Framework.Core.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word $SQLRANDOM.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlIn(BindOpen.Framework.Core.Application.Scopes.IBdoScope,BindOpen.Framework.Core.System.Scripting.IBdoScriptVariableSet,BindOpen.Framework.Core.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word $SQLIN.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
        <member name="M:BindOpen.Framework.Extensions.Scriptwords.ScriptwordDefinition_Database.Fun_SqlList(BindOpen.Framework.Core.Application.Scopes.IBdoScope,BindOpen.Framework.Core.System.Scripting.IBdoScriptVariableSet,BindOpen.Framework.Core.Extensions.Runtime.IBdoScriptword,System.Object[])">
            <summary>
            Evaluates the script word $SQLLIST.
            </summary>
            <param name="scope">The scope to consider.</param>
            <param name="scriptVariableSet">Variables that can be used for interpretation.</param>
            <param name="scriptWord">Script word to evaluate.</param>
            <param name="parameters">The parameters to consider.</param>
            <returns>The interpreted string value.</returns>
        </member>
    </members>
</doc>
